Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-04-24T12:41:29.169005

====== ack ======

__man ack-grep__

**_   /|**
**\'o.O'**
**=(___)= **
**   U       ack!**

http://www.betterthangrep.com/

https://github.com/djanowski/ack-tutorial

Ack uses Perl regexes!

**word-boundary 1: **$ack '**\b**require**\b**'
**word-boundary 2:** $ack** -w** require
**list filenames: **$ack **-l** -w require
**string literal search: **ack** -Q **'$.browser**'										**<<- quotes to escape shell interpretation of $
**context searching: **ack -C 1 return 											<<- 1 line before and after the matching line, for context

perl -i -p -e's/foo/bar/g' $(ack-grep -f --php)					<<- replace all occurences of foo w/ bar in all php files
vim $(!! -l)										     				       <<- open previously listed files (as args!) in vim:

**Perl regular expressions: (man perlre if perl-doc package is installed)**

^				<<- BOS
$				<<- EOS
.  				<<- match any character
\w  			<<- match "word" character (alphanumeric plus "_")
\W  			<<- match non-word character
\s  				<<- match whitespace character
\S  				<<- match non-whitespace character
\d 				<<- match digit character
\D  			<<- match non-digit character
\t  				<<- match tab
\n  				<<- match newline
\r 				<<- match return
\f  				<<- match formfeed
\a  				<<- mMatch alarm (bell, beep, etc)
\e 				<<- match escape
\021  			<<- match octal char ( in this case 21 octal)
\xf0  			<<- match hex char ( in this case f0 hexidecimal)

//Repetition://
* <<- 0 or more times

+ 				<<- 1 or more times
?      			<<- 1 or 0 times
{n}    			<<- exactly n times
{n,}   			<<- at least n times
{n,m}  			<<- at least n but not more than m times

//Groups://
Detect if the line starts with any of the last three presidents:
if($string =~ m**/^(Clinton|Bush|Reagan)/i)**			<<- group match to use: **$1**

//Character Classes://
//for... //
1. Shorthand notation, as [AEIOUY] instead of (A|E|I|O|U|Y). This advantage is minor at best.
2. Character Ranges, such as [A-Z].								<<- all characters in the __collating sequence__
3. translations

[^A-Za-z]				<<- negate the collating sequence

//Examples://
if($string =~ m**/[\)\s\-]\d{3}-\d{4}[\s\.\,\?]/**)			<<- valid phone number format

//Greed://
Perl regexes are greedy by default

Greedy:
my($text) = "mississippi";
$text =~ m/(i.*s)/;
print $1 . "\n";

>__ississ__

Ascetic: (hehe ...)
my($text) = "mississippi";
$text =~ m/(i.***?**s)/;
print $1 . "\n";










