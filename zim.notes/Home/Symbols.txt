Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T17:04:31.837361

====== Symbols ======

**Symbols in **__Ruby__**:**

→ Ruby symbols are like string literals without the methods attached to those literals.
→ Symbols are simply constant names that you don’t have to predeclare and that are guaranteed to be unique.

It's easy to understand them if, when you see //:item //, you call it "the thing named item"

*Ruby uses symbols, and maintains a Symbol Table to hold them. Symbols are names - names of instance variables, names of methods, names of classes. So if there is a method called control_movie, there is automatically a symbol :control_movie. Ruby's interpreted, so it keeps its Symbol Table handy at all times. You can find out what's on it at any given moment by calling __Symbol.all_symbols__.


**Symbols in** __RoR__

→ Rails uses //HashWithIndifferentAccess// instead of hashes, and what that does is it converts any //key// to a string.
hash[:symbol] turns into hash[“symbol”], both when setting and accessing.

→ Rule of thumb in Ruby on Rails: when referring to a unique identifier, use a symbol. When referring to content, use a string.



