Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-06-28T18:52:35.274896

====== Gotchas, Tips and Tricks ======

**Instance variables vs local variables:**

if @a					<<- won't return undefined local variable or method even if @a is undefined
	puts "hi"

end

if a

	puts "hi"			<<- will return undefined local variable or method if a is undefined

end

Local variables do not, like global and instance variables, have the value nil before initialization (definition)

**In the main object, instance methods are all private (no explicit receiver):**


**New local** **variable scope (Scope gates):**

class { }		=> except with Class.new do ... end
module { }		=> except with Module.new do ... end
def { }			=> except with define_method(sym) do... end
Kernel.load	=> script executed in new local scope

**defined? is not assigned?**
a = 2
b = 1 if a == 1

if defined?b
  puts "hi"
end

=> "hi"

b is still defined even though not assigned to!

**Fixnum (and Bignum) are not references to the 1 object. Number 'objects' change their object id's dynamically.**
one = anotherone = 1

**Global variables:**
$_ (last value read by gets) and $~ (regexp match) actually have local scope

**Unbound Methods:**
Unbound singleton methods cannot be bound to any objects besides the singleton (makes sense)

**Local variable assigned to itself:**
ruby-1.9.2-p180 :038 > f = f
 => nil 
ruby-1.9.2-p180 :039 > if f.nil?
ruby-1.9.2-p180 :040?>   puts "unassigned"
ruby-1.9.2-p180 :041?>   else
ruby-1.9.2-p180 :042 >     "assigned"
ruby-1.9.2-p180 :043?>   end
unassigned
 => nil 

**Singleton Classes**
Their type is Class (as their class is Class), yet they also inherit from Class (weird, huh?). Also, singleton class lookup is parallel, a meta-singleton class looks up only in other meta-singleton classes.

**Class Object Stuff:**
class Puppy < Class						=> TypeError: __Can't make subclass of class__
class Puppy < Object.singleton_class	=> TypeError: Can't make subclass of singleton class

**Inheritance, Superclasses and Method-lookup:**
The superclass relation only ever includes classes and it is fixed at class creation
time (by stating "class X < Y" or "Class.new Y") but the inheritance
relation includes classes and modules and is modified whenever a
module is included somewhere in the class hierarchy.  Only the
inheritance relation is considered for method lookups.

**Version Incompatibilities:**

def my_method
	yield(2)
end

x = 1
my_method do |x|
# do nothing special
end
x					# => 2 (behavior changed in 1.9 -> would be 1)

**Dup vs Clone:**
clone copies singleton class of the object, dup does not
both are shallow copies of the object

both copy the instance variables, and freeze the object if frozen?

dup calls Object#initialize_dup, clone calls Object#initialize_clone, which both call initialize_copy (internal method)


