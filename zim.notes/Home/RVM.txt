Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-16T01:31:41.213022

====== RVM ======

//Ruby Version Manager//
//Remember: when installing gems don't use sudo!//

**Create, delete, empty copy and view commands:**
$ rvm gemset create nameofgemset optionalothergemset etc...
$ rvm gemset name															<<- list name of current gemset
$ gem list																		<<- list all gems in current gemset
$ gem list -d rspec-core 2.3.0												<<- show the dir. of that gem
$ rvm list																		<<- shows all Ruby interpreters
$ which ruby																	<<- shows dir. of current Ruby lib
$ rvm gemdir																	<<- view dir. of current gemset
$ rvm gemset list																<<- view all gemsets for //current// Ruby interpreter
$ rvm gemset list_all															<<- view all gemsets for //all// Ruby interpreters
$ rvm gemset copy 1.8.7@rails3 1.9.2-head@rails3						<<- copy one gemset's gems to another gemset
$ rvm gemset delete nameofgemset										<<- can pass - - force as an option for rvm
$ rvm 1.8.7 gemset delete nameofgemset									<<- delete a gemset in another Ruby interpreter
$ rvm gemset empty nameofgemset										<<- can pass - - force as an option for rvm


**Switch between versions of Ruby and different gemsets; Install gems, Uninstall gems:**

$ rvm use 1.9.2-p0															<<- use this Ruby interpreter
$ rvm gemset use global														<<- use the global gemset
$ gem install bundler															<<- install //bundler// gem in //current //gemset 
$ bundle install																<<- bundle the gems in the gemfile into current gemset
$ rvm system																	<<- Use system version (1.8.7)
$ rvm (gemset) use 1.9.2-p0@pickaxe										<<- Use pickaxe gemset
$ rvm use 1.9.2-p0@pickaxe --default										<<- make a gemset the default gemset

**Autoswitch gemsets when cd'ing:**
*Make a file called __.rvmrc__ and put it in your application directory. The notation looks like this:
__rvm use RUBY_VERSION@YOUR_GEMSET__ and mine looks like this:
rvm use 1.9.2@lukegru. 
Now every time I change into that directory it will tell rvm to use ruby version 1.9.2 with gemset lukegru.

**Get rid of documentation:**
 __~/.gemrc__, add
gem: --no-ri --no-rdoc

**Running **__bundle install__** will use the project defined gemset to store the gems. **

**Dumping and loading gemsets:**
Letâ€™s try the export feature as a backup solution:

$ rvm 1.9.2@foo 
$ rvm gemset__ export rails.gems__ 
$__ cat rails.gems __
abstract -v1.0.0; actionmailer -v3.0.0; actionpack -v3.0.0; activemodel -v3.0.0 [..] 

You are then free to send rails.gems to someone else, and that person would simply// import// the gemset like so:

$ rvm use 1.9.2@rails --create
 # Shortcut to create, then switch to it 
$ rvm gemset__ import rails.gems__ 
Which would install all the gems from rails.gems, and the //exact same versions//. 

**Global gemset:**
Gems that are installed to the per-interpreter @global gemset are available to all other gemsets for that interpreter.

**RVMRC files:**
There are different kinds of rvmrc files:
//System:// /etc/rvmrc
//User:// ~/.rvmrc
//Project:// .rvmrc					<<- Every time you cd, RVM looks for a file called .rvmrc. If it finds it, it executes it.

$__ rvm --create --rvmrc 1.9.2@project__
This will create the gemset //and// the .rvmrc file!

**Configuration options in RVMRC files**:
 __rvm_gemset_create_on_use_flag=1__
having this line in ///etc/rvmrc// or //~/.rvmrc //will automatically create gemsets when 'use'd.




