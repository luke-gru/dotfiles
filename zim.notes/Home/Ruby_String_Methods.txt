Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T18:14:34.990958

====== Ruby String Methods ======

**Create String: String.new, %Q{..} = "", %{..} = "", %q{..}   = '' , here documents (Pickaxe, p. 104)**
//For double-quoted string substitution methods, see Pickaxe p. 312//

__.dup__ creates a new object with the same contents
//Example://
person1 = "Tim"
person2 = person1.dup
person1[0] = "J"
puts "#{person1} and #{person2}"
=> Jim and Tim

__.freeze__ prevents modifications to the object
person1 = "Tim".freeze
person1[0] = "J"
=> Can't modify frozen string

__.scan__ returns an //array //of substrings matching the pattern
string.downcase.scan(/[\w']+/)							<<- every word character is its own array object
//trick:// mins, secs = length.scan(/\d+/)					<<- mins to first match, secs to second match

__.sub, .sub!__ sub first match only
str = "Dog and Cat"
new_str = str.sub(/Cat/, "Gerbil")
puts "Let's go to the #{new_str} for a pint."			=> Let's go to the Dog and Gerbil for a pint.

__.gsub, .gsub!__ sub all matches

__.split__ returns an //array// of substrings but splits them between a pattern

__.unpack__ unpacks strings with the use of directives (such as 'c', which extract a character as an Integer)
http://ruby-doc.org/core/classes/String.html#M000760


result = []
"cat"__.each_char.each_with_index__ { |item, index| result << [item, index] }					=> [["c", 0], ["a", 1], ["t", 2]
*each_char method returns an [[Iterators|enumerator]]. 
"cat"__.each_char.with_index__ { |item, index| result << [item, index] }						<<- same as above

__.squeeze(n)__												<<- gets rid of repeating runs of 'n'

__.tr('aeiou', '*')__												<<- replaces all vowels in string with * characters
