Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T16:52:11.431826

====== Ruby Methods ======

[[Ruby Fixnum methods]]

[[Ruby String Methods]]

[[Ruby Array Methods]]

[[Ruby Hash Methods]]


* [[attributes]]
* Class.instance_methods													<<- list all instance methods defined in the class
* //overriding operator methods//, see all operators							<<- Pickaxe p. 330

* **Public **methods can be called by anyone—no access control is enforced. Methods are
public by default (except for initialize, which is always private).
* **Protected **methods can be invoked only by objects of the defining class and its subclasses.
Access is kept within the family.
* **Private** methods cannot be called with an explicit receiver—the receiver is always the
current object, also known as self. This means that private methods can be called only in
the context of the current object; you can’t invoke another object’s private methods.

__public__ :method1, :method4
__protected__ :method2
__private__ :method3

or call //public//, //protected// or //private// keywords

**About Ruby Methods:**
//Default arguments for methods://

__def__ cool_dude(__arg1=__"Miles",__ arg2=__"Coltrane",__ arg3=__"Roach")
	"#{arg1}, #{arg2}, #{arg3}."

__end__
cool_dude									=> "Miles, Coltrane, Roach."
cool_dude("Bart")							=> "Bart, Coltrane, Roach." 
cool_dude("Bart", "Elwood")				=> "Bart, Elwood, Roach."
etc...
___________________________________________________________________
//Splatting an argument: Allowed only one/method. Can put the splat argument anywhere in the argument list, but not before default argument. Receives leftovers and puts them in an array.//

def varargs(arg1, *rest)
	"arg1=#{arg1}. rest=#{rest.inspect}"

end
varargs("one")								=> arg1=one. rest=[]
varargs("one", "two")						=> arg1=one. rest=["two"]
varargs "one", "two", "three"				=> arg1=one. rest=["two", "three"]
_____________________________________________________________________________
//Associated blocks are proc objects.//

class TaxCalculator
	def initialize(name, &block)
		@name, @block = name, block

	end
	
	def get_tax(amount)

		"#@name on #{amount} = #{ @block.call(amount) }"

	end

end

tc = TaxCalculator.new("Sales tax") {|amt| amt * 0.075 }						<<- tc is a  proc for Sales Tax calculations
tc.get_tax(100) 																	=> "Sales tax on 100 = 7.5"
tc.get_tax(250) 																	=> "Sales tax on 250 = 18.75"
_______________________________________________________________________________
//explicit //__return__// keyword and returning multiple parameters (becomes an array)://

def meth_three
	100.times do |num|
	square = num*num
	__return num, square__ if square > 1000

end

meth_three 									=> [32, 1024]
________________________________________________________________________________
//last argument to a method preceded by an ampersand, converts proc to block and associates it with the method it's in://

print "(t)imes or (p)lus: "
operator = gets
print "number: "
number = Integer(gets)
if operator =~ /^t/
	calc = lambda {|n| n*number }
else
	calc = lambda {|n| n+number }
end

puts((1..10).collect(&calc).join(", "))							=> (t)imes or (p)lus: t \n number: 2 \n 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
___________________________________________________________________________________
//If you enclose a string in backquotes (backticks) or use the delimited form//
//prefixed by %x, it will be executed as a command by your operating system. //
//The value of the expression is the standard output of that command. Newlines will not be stripped://

redefining backquotes {def `(cmd)}, Pickaxe p. 142


