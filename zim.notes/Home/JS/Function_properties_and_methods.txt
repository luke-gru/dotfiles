Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-07-08T21:53:26.180112

====== Function properties and methods ======

Functions are objects (of type Function), so they have properties and methods.
Methods are just functions invoked by objects.

**Length Property:**

Function.length 	=> returns the number of explicit arguments given to the function in its definition
				     (available inside and outside of the function)

in a function, arguments.callee.length is the same as [thisfunction].length

**Prototype Property**:
Important only when using the new Function constructor.

**Defining properties:**
Good to use when you want a variable to persist across the function's invocations, and the variable relates only to that function object.

//Example://
// Create and initialize the "static" variable.
// Function declarations are processed before code is executed, so
// we really can do this assignment before the function declaration.
uniqueInteger.counter = 0;
// Here's the function. It returns a different value each time
// it is called and uses a "static" property of itself to keep track
// of the last value it returned.
function uniqueInteger( ) {
// Increment and return our "static" variable
return uniqueInteger.counter++;
}

**Apply and Call Methods:**
f.call(o, 1, 2);					=> object o is //this //in the invocation, 1 and 2 are args

f.apply(o, [1,2]);				=> same as above, args are in an array

//Example, to find largest number in array://
var biggest = Math.max.apply(null, array_of_numbers);

**The Difference between Functions and Methods?**
While it is useful to think of functions and methods differently, there is not actually as
much difference between them as there initially appears to be. Recall that functions are
values stored in variables and that variables are nothing more than properties of a global
object. Thus, when you invoke a function, you are actually invoking a method of the
global object. Within such a function, the this keyword refers to the global object. Thus,
there is no technical difference between functions and methods. The real difference lies in
design and intent: methods are written to operate somehow on the this object, while
functions usually stand alone and do not use the this object.										=> Sort of like in Ruby!

**Defining, Invoking Methods:**
// This function uses the this keyword, so it doesn't make sense to
// invoke it by itself; it needs instead to be made a method of some
// object that has "width" and "height" properties defined.
function compute_area( )
{
return this.width * this.height;
}
// Create a new Rectangle object, using the constructor defined earlier.
var page = new Rectangle(8.5, 11);
// Define a method by assigning the function to a property of the object.
__page.area = compute_area;__																		=> this is crucial, to 'bind' the function to the object. This is a singleton method, 
// Invoke the new method like this:																       though...
var a = page.area( );
// a = 8.5*11 = 93.5

**Defining Methods in a Constructor:**
// First, define some functions that will be used as methods.
function Rectangle_area( ) { return this.width * this.height; }
function Rectangle_perimeter( ) { return 2*this.width + 2*this.height; }
function Rectangle_set_size(w,h) { this.width = w; this.height = h; }
function Rectangle_enlarge( ) { this.width *= 2; this.height *= 2; }
function Rectangle_shrink( ) { this.width /= 2; this.height /= 2; }

// Then define a constructor method for our Rectangle objects.
// The constructor initializes properties and also assigns methods.

function Rectangle(w, h)
{
__// Initialize object properties.__
this.width = w;
this.height = h;
__// Define methods for the object.__
this.area = Rectangle_area;
this.perimeter = Rectangle_perimeter;
this.set_size = Rectangle_set_size;
this.enlarge = Rectangle_enlarge;
this.shrink = Rectangle_shrink;
}																=> This is much better, but takes up lots of memory (lots of singleton methods). It's better to inherit from a 																		prototype object.

[[Home:JS:Prototypes and Inheritance|Prototypes and Inheritance]]

