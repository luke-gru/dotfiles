Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-07-08T13:00:44.323492

====== Compound Statements ======

**Statement Blocks:**
Enclose any number of statements within curly braces. Acts as a single statement.

{
x = Math.PI;
cx = Math.cos(x);
alert("cos(" + x + ") = " + cx);
}

**If Statements:**
if (!username) username = "John Doe"; 			=> single statement (curly braces not required, but good practice with longer statements)

if ((address == null) || (address == "")) **{**			=> statement block
address = "undefined";
alert("Please specify a mailing address.");
**}**

**Else if:**
if (n == 1) {
// Execute code block
}
else if (n == 2) {
// Execute code block
}
else if (n == 3) {
// Execute code block
}
else {
// If all else fails,
}

**Case**
switch(n) {			=> case === n will execute the case statement. No type conversion!
case 1:				=> value of case can be arbitrary expression, like PHP and Ruby (JS > 1.3)
// Execute
**break;**
case "foo":
// Execute
**break**;
case 3:
// Execute
**break;**
default:
// Execute
**break;**
}

**do ... while**
do						=> always executes at least once
statement
while (expression);	=> note the semicolon termination of the loop

**for (init, test, inc) {   **=> same as PHP

}

**for var (or array) in Object {   } ** 	=> iterates over properties of an object or indices in the array. All built-in methods are non-enumerable. Inherited, user-defined 								      properties are enumerable

**Labeling a Statement:**
Common to label loops. Allows use of break and continue (next in ruby) to break out of non-immediately enclosed statements (in nested statements)
Allows reference to the statement by the identifier name with //break// //labelname; //or //continue// //labelname;//

//Example://
parser:
while(token != null) {
// Code omitted here
}

**The Empty Statement:**
for(i=0; i < a.length; a[i++] = 0) ;		=> runs the loop, does its stuff, no statements in the loop though

//Comment the code://
for(i=0; i < a.length; a[i++] = 0) /* Empty */ ;


