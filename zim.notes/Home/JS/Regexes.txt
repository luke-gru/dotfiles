Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-07-11T21:05:54.142909

====== Regexes ======

literals			=> like in Ruby
constructor		=> var pattern = new RegExp("s$");

**flags:**
g					=> perform all matches, global (like in Vi)

**Doesn't support:**
positive look-behinds (?<= ... )
negative look-behinds (?<! ... )
comments			  (?# ... )

**Constructor Regexes:**
Good for dynamically creating regex objects at runtime

var wtv = new RegExp("\\d{5}", "g");					=> note the double escape sequence to get past the double quotes to the regex literal

**Methods:**
__/regex/.exec("string"__//) 								//=> just like "string".match(/regex/) in that it returns array[0] for match, array[1] for $1, with methods array.index and 
												
__/regex/g.exec("string")__								=> also has array.lastIndex which is +1 index of last index position of previous match. Useful for looping through a string 															and doing stuff with all matches. 
//Example://
var pattern = /Java/g;
var text = "JavaScript is more fun than Java!";
var result;
while((result = pattern.exec(text)) != null) {			=> returns null on a no match
alert("Matched `" + result[0] + "'" +
" at position " + result.index +
"; next search begins at " + pattern.lastIndex);		=> remember to manually set lastIndex to 0 before searching with same regexp
}

__/regex/.test("string")__								=> calls exec, returns true if exec method does not return null. Has lastIndex property and everything


**Instance Properties:**
source							=> text of regular expression R/O
global							=> boolean R/O
ignoreCase					=> boolean R/O
multiline						=> boolean R/O
lastIndex						=> explained in //Methods// section, R/W
