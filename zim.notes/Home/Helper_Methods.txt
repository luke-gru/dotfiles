Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T16:40:11.089752

====== Helper Methods ======
//Helpers are rails methods that make it easier to write templates. Helpers appear when a controller is generated as ControllerHelper.//

*[[form_for]] helper
*helpers are //automatically// included in all rails views, but there's a specific dir. for each helper method you define.
*use <%**=** %> for block helper methods as of 3.0 

**Useful helper methods:**

→ __link_to__  creates a hyperlink to an action
//Example://
 <p>
	Time to say
	<%= __link_to__ "Goodbye!" , :action => "goodbye" %>                                 <<-- links to a method called 'goodbye' in the current controller (Say)
</p>
//Other Examples://
//1.//
<%= link_to 'Edit', __edit_product_path(@product)__ %>					<<- links to named route (see [[REST actions|RESTactions]]), and here @product defined in 				    //2.//																			ProductsController in instance method def edit; @product = Product.find(params[:id])
<%= link_to 'Back', __products_path__ %>									<<- links to named route (see [[REST actions|RESTactions]])
//3.//
<%= link_to "Destroy", product, __:confirm__ => "Are you sure?", __:method__ => :delete %>		<<- Here, @product.each do |product| iteration. So, @product.id

<%= link_to user_path(@user), __@user__ %>								<<- Here, @user == user_path(@user). more idiomatic this way


→ __stylesheet_link_tag__ 
//Example://

	<%= __stylesheet_link_tag__ "depot" , __:media__ => "all" %>                    <<-- stylesheets found in //public/stylesheets//

→ __number_to_currency__												<<- changes, for example: **26.5** to **$26.50**
//Example://
//In our view, change//

<span class="price" ><%= product.price %></span>

//to//

<span class="price"><%= __number_to_currency__(product.price) %></span>

→ __button_to__
//Example://
	<%= __button_to__ "Add to Cart" %>					<<-- auto-sends POST HTTP request with a default //:action //of 'create'. html-wise, creates //form// and //div//
	LATER BECOMES

	
	<%= __button_to__ "Add to Cart", __:action__ => __'add_to_cart'__, __:id__ => product %>            <<-- //:action// corresponds to a method, //:id corresponds to an object in a table//.

	
	//The local variable is assigned here, in the store controller://

def add_to_cart
	product = Product.find(params[:id])
	@cart = find_cart
	@cart.add_product(product)
end

**button_to creates an HTML <form>, and that form contains an HTML <div>. Hammock p. 103 for CSS help to display inline or prettify

→ __cycling classes of each row__ and adding __class param__ to an image:
<table>
	<% @products.each do |product| %>
		<tr class="<%= __cycle__('list-line-odd, list-line-even') %> ">				<<- cycle through and make the classes of each row alternate b/t// l-l-e//, //l-l-o//
		
			<td>
				<%= image_tag product.image_url, :class => 'list-image' %>
			</td>
...

→ __truncate__
<td class="list-description">
				<dl>
					<dt><%=h product.title %></dt>
					<dd><%=h truncate(product.description.gsub(/<.*?>/, ""),
								__:length__ => 80 %> </dd>
				</dl>
			</td>

→ __pluralize__			(in **ActionView::Helpers::TextHelper**)
<h1>Welcome</h1>

It's <%= Time.now %>

We have <%= __pluralize__(@total_orders, 'order') %>.							<<- pluralize (number, 'word')



→ __content_tag__ see [[Home:JS|JS]]
	wraps the output of a block in a tag

**Form Helpers: (generates HTTP POST request that (here) gets handled by the save_order action)**
//Example in checkout view of store (depot)//

//First iteration://
<% form_for **:order**, :url => { __:action__ => __:save_order__ } do |form| %>				<<- the object named @order (make the last request pass it)
	<p>
		<label for="order_name">Name:</label>
		<%= form__.text_field__ **:name**, :size => 40 %>				<<- when iterating over forms, these html attr_readers are available. Also, //:name = @order.name//
	</p>															when iterating (the orders table attributes). VERY useful! 
<% end %>


//Second iteration://
	<% form_for **:order**, :url => { :action => :save_order } do |form| %>
		<fieldset>
			<legend>Please Enter Your Details</legend>
			
			<div>
				<%= form__.label__ :name, "Name:" %>					<<- <label for="VARIES" >
				<%= form__.text_field__ :name, __:size__ => 40 %>
			</div>

		
			<div>
				<%= form.label :address, "Address:" %>
				<%= form__.text_area__ :address, __:rows__ => 3, __:cols__ => 35 %>
			</div>

			
			<div>
				<%= form.label :email, "E-mail:" %>
				<%= form__.text_field__ :email, __:size__ => 40 %>
			</div>

			
			<div>
				<%= form.label :pay_type, "Pay with:" %>
				<%= 
				form__.select__ :pay_type,														<<- Dropdown menu 
										 Order::PAYMENT_TYPES,							<<- options in menu
										:prompt => "Select a payment method" 			<<- default dummy selection
				%>
			</div>

			
			<%= __submit_tag__ "Place Order", __:class__ => "submit" %>
		</fieldset>
	<% end %>
</div>

