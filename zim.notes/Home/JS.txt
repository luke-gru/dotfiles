Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-01-06T18:50:02.445251

====== JS ======
//Javascript//
//*Note that Ajax and JS source code is read top to bottom and will execute in that order//

**Highlighting Changes with JS:**
//Example in depot, Hammock p. 134, highlighting current_item div//

def add_product(product)
	current_item = @items.find {|item| item.product == product}
	if current_item

		current_item.increment_quantity

	else

		current_item = CartItem.new(product)
		@items << current_item

	end
	current_item																<<- make sure the method RETURNS the thing we need to highlight

end

//then we need to change the actual add_to_cart method in the StoreController//

def add_to_cart
	product = Product.find(params[:id])
	@cart = find_cart
	__@current_item__ = @cart.add_product(product) 				<<- can use the add_product method because it is a Cart instantiation
	respond_to do |format|
		format.js

end

//then change the view in the _cart_item.html.erb partial.//

<% **if** cart_item == @current_item %>				<<- we're still in the StoreController
	<**tr id**="current_item">							<<- we can do JS stuff with IDs!
<% **else** %>
	**<tr>**
<% **end** %>

__page[:current_item]__.__visual_effect__ :highlight, :startcolor =>"#88ff88", :endcolor => "114411"		<<- [//:current_item//] is the div id


**Blind down effect: **
//Example in Depot with add_to_cart, hide empty cart.//

DON'T do 
<% __unless__ cart.items.empty? %>					<<- smoother if use JS
html code
<% end %>

//Javascript Way: //__blind_down__// method (pulls html div down)//

__page[:cart]__.visual_effect __:blind_down__ if @cart.total_items == 1									<<- ['cart'] is the div id

//need class Cart total_items method://

def total_items

	@items.sum {|item| item.quantity }

end

**Hiding something until method invocation:**
//and finally, the view (app/views/layouts/store.html.erb)://

<div id="cart"
<% if @cart.items.empty? %>
	style="display: none"
<% end %>
>																<<- ugly coding. Make my own helper method!
				
//How about this instead!//

<% __hidden_div_if(@cart.items.empty?__, __:id => "cart"__) **do** %>
	<%= render(:partial => "cart", :object => @cart) %>									<<- unrender if @cart.items.empty? == false
<% **end** %>

So we need a helper method that takes a //condition, a hash argument and a block. Also, we need to wrap the block in a div! (//__content_tag__ [[Home:Helper Methods|helper]])

**def** hidden_div_if(condition, attributes = {}, &block)

	if condition
		attributes["style"] = "display: none"
	end

        __content_tag__("div", attributes, &block)							<<- wraps the block in a "div"! Makes __<div id="cart" style="display: none">__
**end														**

//So now we can change the view in the store layout!//

<% __hidden_div_if(@cart.items.empty?__, :id => "cart") **do**// %>								<<- //Much better
		<%= render(:partial => "cart", :object => @cart) %>								

<% **end** %>

**Degrading JS gracefully:**

When a user clicks on a __button_to__(or other Helper) where //:remote// => true and the user has JS enabled, browser sends an xmlHTTPRequest to the app server. If not, target action is invoked using POST. If user has JS enabled, __xhr__ object to back-channel with server.

So, in the action that the button_to is associated with, //:action => add_to_cart , //add the following://					<<- (depot)//


respond_to do |format|
			format.js **if** **request**__.xhr__?
			format.html { redirect_to_index }						<<- if not, just format to html and then execute block
end




