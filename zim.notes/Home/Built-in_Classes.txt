Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-21T17:09:27.052291

====== Built-in Classes, Modules, Libraries ======
***check an object's class:** obj.class

**Time:**
//Time.now(.utc)							=> 	2010-12-22 18:44:20 -0500 //
//Time.now.saturday?						=> true//
//Time.now.month							=> 12//
//t = Time.new.strftime(string)				<<- formats time according to the directives in the given string (see ri strftime, ruby-core)//

**File:**
File.foreach("/etc/passwd") do |line|
	__next if__ line =~ /^#/											<<- skip comments

	__parse__(line) unless line =~ /^$/							     <<- don't parse empty lines

end
__________________________________
print File.read(____FILE____)											<<- prints source file if in source file
print File.read("NameOfFile")									<<- prints NameOfFile in current directory 


//for more info see: //
[[input.output]]

**Class**
__.superclass__															=> name of superclass


//Ways to make new classes://

__def class NameOfClass__
__SomeClass = Class.new__															  <<- make sure the assignment is a constant. Then, can def with class SomeClass.

def MyStruct(*keys)																  <<- this is showing what the class Struct is like. Here, MyStruct //is// a class!!
	__Class.new do__																	<<- __creates class inside method. Method is now class.__

		attr_accessor *keys

			def initialize(hash)

				hash.each do |key, value|

					instance_variable_set("@#{key}", value)				<<- sets instance variables

				end

			end

	end

end

Person = MyStruct :name, :address, :likes
dave = Person.new(name: "dave", address: "TX", likes: "Stilton")
chad = Person.new(name: "chad", likes: "Jazz")
chad.address = "CO"
puts "Dave's name is #{dave.name}"
puts "Chad lives in #{chad.address}"
=>
Dave's name is dave
Chad lives in CO
_________________________________________________________

//You can save the def of Class.new.//

SomeClass = Class.new do
	def self.class_method

		puts "In class method"

	end
	def instance_method

		puts "In instance method"

	end

end

SomeClass.class_method
obj = SomeClass.new
obj.instance_method
=>
In class method
In instance method

//By default, these classes will be direct descendents of Object//. //You can give them a different parent by passing the parent’s class as a parameter://

some_class = Class.new(String) do
	def vowel_movement

		tr 'aeiou', '*'

	end

end

obj = some_class.new("now is the time")
puts obj.vowel_movement
=>
n*w *s th* t*m*

**Dir:**
__Dir.glob('*')__															<<- class method for returning all files in current directory



**CSV:**





**GServer:**



**Numeric:**
Numeric is a built-in class on which Fixnum, Bignum, etc., are based. 
http://ruby-doc.org/core/classes/Numeric.html

**Range: e.g. (1..10)**

__Sequences:__ start and end points.
1..10, 1...10 //Example methods://
digits = 0..9
digits.include?(5)					=> true
digits.min							=> 0
digits.max						=> 9
digits.reject {|i| i < 5 }				=> [5, 6, 7, 8, 9]
digits.inject(:+)					=> 45

__Conditions:__ 												<<- see pickaxe p. 333
while line = gets
puts line if line =~ /start/ .. line =~ /end/					<<- prints sets of lines, each set starts with the regex match 'start' and ends with the regex match 'end'
end

__Intervals:__ used in case statements a lot. For case statements with float numbers, use exclusive intervals.

(1..10) === 5							=> true
(1..10) === 15							=> false
(1..10) === 3.14159					=> true
('a'..'j') === 'c'							=> true
('a'..'j') === 'z'							=> false

**Struct:**
//Data structure that contains a given set of attributes. Behaves like a class.//
Example: Song = Struct.new(//:title, :name, :length)//

*Pickaxe p. 385

Person = __Struct.new__(:name, :address, :likes)											<<- Here, Person behaves like a class!
class Person
	def to_s

		"#{self.name} lives in #{self.address} and likes #{self.likes}"

	end

end

However, we can do this more elegantly (although at the cost of an additional class object) by
writing this:

class Person < Struct.new(:name, :address, :likes)
	def to_s

		"#{self.name} lives in #{self.address} and likes #{self.likes}"

	end

end

dave = Person.new('Dave', 'Texas')
dave.likes = "Programming Languages"
puts dave
=>
Dave lives in Texas and likes Programming Languages



**CGI: write Common Gateway Interface scripts**



**Built-in Modules:**

//Config//
__rbconfig__ for build Env.												<<- rbconfig lib.
require 'rbconfig'
__include Config__														<<- Config mod.
CONFIG["host"]														=>  "i386-apple-darwin10.4.0"
CONFIG["libdir"]														=> "/Users/dave/.rvm/rubies/ruby-1.9.2-p0/lib"

//Math//
Math::E																=> 2.718281828459045
Math.sin(Math::PI/6.0)												=> 0.49999999999999994

**Built-in Libraries:**

//OptionParser//
test/unit




**Access module constants, classes and modules inside modules:**
→ //modules and classes are treated like constants//

module Formatters
	class Html
	# ...
	end
	class Pdf
	# ...
	end

end

html_writer = __Formatters::Html__.new								<<- Html, even though a class, is accessed like a constant (classes and mods. ARE constants!)

