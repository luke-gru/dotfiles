Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T19:42:48.920898

====== Rails Methods ======

**Validation hook methods (put in Model) before saving information to database:**
validates_presence_of //:attribute(s) (:title, :description, :image_url)					<<- DEPRECATED 3.0 (see below for true method)//
//is now // __validates :attribute, :presence => true__
validates_uniqueness_of //:attribute (:title)												<<- DEPRECATED 3.0//
//is now //__validates :attribute, uniqueness => true__
__validates_numericality_of__ //:attribute (:price)//
__validate__ //:symbol_of_defined_method//
__validates_uniqueness_of__ //:attribute (:title)//
__validates_format_of__ //:attribute (  //__:image_url__//, //__:with __//=> //%r//{\.(gif|jpg|png)$}i, //__:message__// => ' Must be a GIF, JPG or PNG image' )//
__validates_length_of__                       	<<- *parameters: (//:maximum, :minimum, :within)//
Example:
validates :name,      :presence => true, :length => { :maximum => 50 }

__validates_inclusion_of__	:pay_types, //:in => PAYMENT_TYPES.map {|disp, value| value}		<<- (depot)//

__validates_confirmation_of__ :password													<<- validates the the passwords match (*note: the errors belong 	 																								to //:password //if the password doesn't match with //:password_confirmation//

**__attr_accessible [:name, :email]__								<<- which attributes can be changed by people submitting requests

validates :email, :presence   => true,
                    __:format__     => { __:with__ => email_regex },
                    __:uniqueness__ => { __:case_sensitive => false__ }					<<- uniqueness doesn't apply to case-sensitivity

*These validation methods can take the following parameters: (//:message => (error msg, must be associated w/ last param), :) //
*//allow_blank => bool// and //allow_nil => bool//

**Error methods and objects: (used along with validation methods and [sometimes scaffolded] view error-handling)**
errors.add(...)  *
//Example://
def price_must_be_at_least_a_cent
	__errors.add__(__:price__, 'should be at least 0.01' ) if self.price.nil? ||                 <<-- Here, price is a column (attribute) to the Product model (class Product)
	self.price < 0.01
end

*in this example, price_must_be_etc.. would have to be validated through the //validate //method for the error to be caught correctly and not saved to the db.
__validate__ //:price_must_be_at_least_a_cent//

**Standalone error handling: **(Example from depot)
//Example://
	def add_to_cart
		product = Product.find(params[:id])
		@cart = find_cart
		@cart.add_product(product)
	**rescue ActiveRecord::RecordNotFound**
	__logger.error__("Page does not exist.")
	__flash[:notice]__ = "Welcome back!"
	__redirect_to :action__ => 'index'										<<- __redirect_to__ method (default controller = current controller), can use **paths**,
	end																		and can take __:notice => "message", and :error => "message", not :success though__

**redirect_to with controller and action:**
  def authorize
    unless User.find_by_id(session[:user_id])
      flash[:notice] = "Please log in"
      __redirect_to__ :controller => 'admin', :action => 'login'
    end
  end

**redirect_to with only controller: (goes to index)**


 
**Find items from database:**
→ __find__

//Example: (in Product model in depot app)//
def find_products_for_sale
		__find__(__:all__, __:order__ => "title")		<<-- This looks at all rows in the table //products// and returns a big array containing each object found. The array is  	end										sorted alphabetically by title attribute. Method was invoked in the //index// action of the StoreController 


**Sum for products(total):**
→ __.sum__
def total_price
		@items.sum  { |item| item.price}							<<- iterates and sums iterations
end

**Trick to make a parameter to a method optional (can be used in all Ruby)**
def redirect_to_index(msg = **nil**)														<<- default the param to nil and use //if // to test boolean value
	flash[:notice] = msg __if__ msg
	redirect_to :action => 'index'

end
