Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-01-06T15:40:35.580118

====== AJAX ======
//Asynchronous Javascript and XML//
//*Note that Ajax and JS source code is read top to bottom and will execute in that order//

Ajax lets us write code that runs in the browser that interacts with our server-based application. 

For example, in //Depot//  we’d like to make the Add to Cart buttons in the store#index page
invoke the //server// __add_to_cart__ action in the background. The server can then
send down just the HTML for the cart (cart is in sidebar), and we can replace the cart in the
sidebar with the server’s updates!

**Send AJAX form to application server:**

//Example: non-AJAX form//
<%= __button_to__ "Add to Cart" ,__ :action__ => :add_to_cart, __:id__ => product %>
**generates HTML that looks something like this:**
<form method=**"post"** action="/store/add_to_cart/1" class="button-to">			<<- we don't want a local POST request!
<input type="submit" value="Add to Cart" />
</form>

//so instead we do the following to send the AJAX request to the server://

<%= __button_to__ "Add to Cart", { :action => "add_to_cart", :id => product }, :method => 'post', :remote => true %>


//and make sure to include Javascript libs to your layout so the AJAX form is sent!//

<html>
<head>
<%=__ javascript_include_tag__ :defaults %>

**Have server return HTML:**


	def add_to_cart												<<- redefine the method to respond to javascript

		product = Product.find(params[:id])
		@cart = find_cart
		@cart.add_product(product) #can use the add_product method because it is a Cart instantiation
		__respond_to do |format|__
__			format.js__
__		end__

	rescue....
	....
	end

     end

//and then make sure to add the methodname.js.rjs (add_to_cart.js.rjs) file in app/views dir.//

__page.replace_html__("cart", :partial => 'cart', :object => @cart )				<<- send back the updated object @cart in the //add_to_cart// method

This replaces contents of current page whose ID = 'cart' with the sendback from the application server

**Hide a div with AJAX when a certain action is invoked**
//in depot/a/v/s/add_to_cart.js.rjs//
__page.select__("div#noticeGood").each { |div| div__.hide __}			<<- every time the add_to_cart action is invoked, HIDE THIS DIV

*page.select matches **any** //CSS selector pattern. //Also, this is a little bit of a hack because this div is not always present. Only iterates over it if it's present. 
page[:noticeGood].hide would render and ERROR if it didn't find the div (which is most of the time. 



