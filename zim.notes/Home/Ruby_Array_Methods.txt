Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2010-12-13T18:14:19.792532

====== Ruby Array Methods ======

**Simple Array Methods:**

//Indexing arrays://

a = ["cat", "bat", "dog", "crow", "ant", "elk"]
a[-3..-1]= nil
=> a = ["cat", "bat", "dog", nil, nil, nil]

You can also index arrays using [start__,__ count] format. If using start, count with assigning one value, the value is assigned to the first number and the rest
of the array indices are gone

Complete list on __page 64,65__ of the __Pickaxe__ book.



__.length, .count__, also takes a block to see how many return true for the block
//Example://
array = []
array[0]= "me"
array.length
=> 1

__.first(n)__									<<- default n=1
__.last(n)__									<<- default n=1

__.each { |elem1, elem2| puts " Elem1: #{elem1}, Elem2: #{elem2}" }__					<<- This is an [[Iterators|iterator]] over an array



__.push(newobject)__							<<- pushes in an object from the right, placing it at index[-1].
//Example://
stack = []
stack.push "Red"
stack.push "Green"
stack.push "Blue"
p stack
=> ["Red", "Green", "Blue"]



__.pop__ 										<<- pops the object at index [-1]


__.shift__										<<- bye-bye object at index [0]

__.unshift(newobject)__						<<- hello new object at index [0]

[1, 3, 5, 7, 9]__.find __{|v| v*v > 30 } 			<<- finds object, but must pass parameter(s) in block
 => 7

//Actual defintion://
class __Array__
	def __find__

		for i in 0...size
		value = __self__[i]
		return value__ if yield(value)__

	end
	return nil
	end

end

__.pack__
http://ruby-doc.org/core/classes/Array.html#M002222


